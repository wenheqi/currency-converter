{"version":3,"sources":["images/converter.svg","components/CurrencyCard.js","components/HistorialCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CurrencyCard","timestamp","srcCode","dstCode","sendCodeToParent","amountInEuro","sendAmountInEuroToParent","useState","tmpJson","currencies","forEach","currency","currency_code","loadCurrenciesJson","currenciesJson","src","setSrc","dst","setDst","rates","exchangeRate","setExchangeRate","amount","setAmount","useEffect","fetch","then","res","json","result","console","log","tmpAmount","Math","abs","Number","parseFloat","toFixed","Card","className","Header","onChange","e","target","value","map","key","Body","Title","currency_name","Subtitle","Row","Col","sm","alt","flag_name","type","title","parseInt","Date","toUTCString","HistorialCard","data","setData","tmpData","Object","keys","name","rate","push","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","fill","App","setSrcCode","setDstCode","setAmountInEuro","rotation","setRotation","style","backgroundImage","code","OverlayTrigger","placement","overlay","Tooltip","id","transform","swapSvg","onClick","tmpSrc","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b99347b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/converter.0f54a3c7.svg\";","import React, { useState, useEffect } from \"react\";\nimport { Card, Row, Col } from \"react-bootstrap\";\nimport \"./CurrencyCard.css\";\n\nimport currencies from \"../data/currencies\";\n\nfunction CurrencyCard({\n  srcCode,\n  dstCode,\n  sendCodeToParent,\n  amountInEuro,\n  sendAmountInEuroToParent,\n}) {\n  function loadCurrenciesJson() {\n    let tmpJson = {};\n    currencies.forEach((currency) => {\n      tmpJson[currency.currency_code] = currency;\n    });\n    return tmpJson;\n  }\n\n  const [currenciesJson] = useState(loadCurrenciesJson());\n  const [src, setSrc] = useState(srcCode);\n  const [dst, setDst] = useState(dstCode);\n  const [exchangeRate, setExchangeRate] = useState({ rates: {} });\n  const [amount, setAmount] = useState(0);\n\n  useEffect(() => {\n    fetch(\n      \"http://data.fixer.io/api/latest?access_key=7d8d9e998e00341ea569445f3215f0a0&symbols=\" +\n        dst +\n        \",\" +\n        src\n    )\n      .then((res) => res.json())\n      .then((result) => {\n        console.log(result);\n        setExchangeRate(result);\n      });\n  }, [src, dst]);\n\n  useEffect(() => {\n    setDst(dstCode);\n  }, [dstCode]);\n\n  useEffect(() => {\n    setSrc(srcCode);\n  }, [srcCode]);\n\n  useEffect(() => {\n    let tmpAmount = amountInEuro * exchangeRate.rates[src];\n    // console.log(\"tmpAmount is \" + tmpAmount);\n    if (Math.abs(tmpAmount - amount) > 0.00001) {\n      tmpAmount = Number.parseFloat(tmpAmount.toFixed(5));\n      setAmount(tmpAmount);\n    }\n  }, [amountInEuro, src, dst, exchangeRate]);\n\n  const handleSelectOptionChange = (e) => {\n    // console.log(\"handleSelectOptionChange is called\");\n    setSrc(e.target.value);\n    sendCodeToParent(e.target.value);\n  };\n\n  const handleInputChange = (e) => {\n    // console.log(\"EUR is \" + e.target.value / exchangeRate.rates[src]);\n    setAmount(e.target.value);\n    sendAmountInEuroToParent(e.target.value / exchangeRate.rates[src]);\n  };\n\n  const displayDate = (timestamp) => {\n    let date = new Date(timestamp);\n    return date.toUTCString();\n  };\n\n  return (\n    <Card className=\"h-100 shadow-sm rounded\">\n      <Card.Header className=\"bg-white\">\n        <select\n          className=\"form-control col-xs-3\"\n          onChange={handleSelectOptionChange}\n          value={src}\n        >\n          {currencies.map((currency) => {\n            return (\n              <option\n                key={currency.currency_code}\n                // selected={src == currency.currency_code ? true : false}\n              >\n                {currency.currency_code}\n              </option>\n            );\n          })}\n        </select>\n      </Card.Header>\n      <Card.Body>\n        <Card.Title>{currenciesJson[src].currency_name}</Card.Title>\n        {/* <Card.Subtitle>{currenciesJson[src].display_unicode}</Card.Subtitle> */}\n        <Card.Subtitle>\n          1 {src} ={\" \"}\n          {Number.parseFloat(\n            (exchangeRate.rates[dst] * 1.0) / exchangeRate.rates[src]\n          ).toFixed(5)}{\" \"}\n          {dst}\n        </Card.Subtitle>\n        <Row>\n          <Col sm={3}>\n            <img\n              alt=\"flag of United States\"\n              src={\n                \"https://www.countryflags.io/\" +\n                currenciesJson[src].flag_name +\n                \"/shiny/64.png\"\n              }\n            />\n          </Col>\n          <Col sm={9}>\n            <input\n              type=\"number\"\n              title=\"Please enter a number, e.g. 123.987.\"\n              value={amount}\n              onChange={handleInputChange}\n              className=\"h-100 w-100 text-right border-top-0 border-left-0 border-right-0 fs-xlg\"\n            />\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col>\n            <span className=\"fs-sm\">\n              Last update:{\" \"}\n              {displayDate(Number.parseInt(exchangeRate.timestamp) * 1000)}\n            </span>\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default CurrencyCard;\n","import React, { useState, useEffect } from \"react\";\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\n// const data = [\n//   { name: \"AED\", rate: 3.97467 },\n//   { name: \"AFN\", rate: 83.005989 },\n//   { name: \"ALL\", rate: 123.366634 },\n//   { name: \"AMD\", rate: 527.975462 },\n//   { name: \"ANG\", rate: 1.941971 },\n//   { name: \"AOA\", rate: 603.731679 },\n//   { name: \"ARS\", rate: 73.193491 },\n//   { name: \"AUD\", rate: 1.687 },\n//   { name: \"AWG\", rate: 1.947888 },\n//   { name: \"AZN\", rate: 1.843968 },\n//   { name: \"BAM\", rate: 1.957295 },\n\n//   { name: \"AED\", rate: 3.97467 },\n//   { name: \"AFN\", rate: 83.005989 },\n//   { name: \"ALL\", rate: 123.366634 },\n//   { name: \"AMD\", rate: 527.975462 },\n//   { name: \"ANG\", rate: 1.941971 },\n//   { name: \"AOA\", rate: 603.731679 },\n//   { name: \"ARS\", rate: 73.193491 },\n//   { name: \"AUD\", rate: 1.687 },\n//   { name: \"AWG\", rate: 1.947888 },\n//   { name: \"AZN\", rate: 1.843968 },\n//   { name: \"BAM\", rate: 1.957295 },\n\n//   { name: \"AED\", rate: 3.97467 },\n//   { name: \"AFN\", rate: 83.005989 },\n//   { name: \"ALL\", rate: 123.366634 },\n//   { name: \"AMD\", rate: 527.975462 },\n//   { name: \"ANG\", rate: 1.941971 },\n//   { name: \"AOA\", rate: 603.731679 },\n//   { name: \"ARS\", rate: 73.193491 },\n//   { name: \"AUD\", rate: 1.687 },\n//   { name: \"AWG\", rate: 1.947888 },\n//   { name: \"AZN\", rate: 1.843968 },\n//   { name: \"BAM\", rate: 1.957295 },\n// ];\n\nexport default function HistorialCard({ src, dst }) {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    console.log(\"useEffect in Historical card is called\");\n    fetch(\n      \"http://data.fixer.io/api/latest?access_key=7d8d9e998e00341ea569445f3215f0a0\"\n    )\n      .then((res) => res.json())\n      .then((json) => json.rates)\n      .then((json) => {\n        let tmpData = [];\n        Object.keys(json).forEach((key) => {\n          if (key !== src && key !== dst) {\n            let tmpJson = {\n              name: key,\n              rate: Number.parseFloat(json[key] / json[src]).toFixed(5),\n            };\n            tmpData.push(tmpJson);\n          }\n        });\n        setData(tmpData);\n      });\n    console.log(data);\n  }, [src, dst]);\n\n  return (\n    <ResponsiveContainer width=\"100%\">\n      <BarChart\n        width={600}\n        height={300}\n        data={data}\n        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"rate\" fill=\"#ebc135\" />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nimport swapSvg from \"./images/converter.svg\";\n\nimport CurrencyCard from \"./components/CurrencyCard\";\nimport HistorialCard from \"./components/HistorialCard\";\n\nfunction App() {\n  const [srcCode, setSrcCode] = useState(\"USD\");\n  const [dstCode, setDstCode] = useState(\"HKD\");\n  const [amountInEuro, setAmountInEuro] = useState(0);\n  const [rotation, setRotation] = useState(0);\n\n  const sendSrcCodeToParent = (code) => {\n    setSrcCode(code);\n  };\n\n  const sendDstCodeToParent = (code) => {\n    setDstCode(code);\n  };\n\n  const sendAmountInEuroToParent = (amount) => {\n    setAmountInEuro(amount);\n  };\n\n  const swap = (e) => {\n    setRotation(rotation == 0 ? 360 : 0);\n    let tmpSrc = srcCode;\n    let tmpDst = dstCode;\n    setSrcCode(tmpDst);\n    setDstCode(tmpSrc);\n    console.log(e);\n  };\n\n  return (\n    <div\n      className=\"container\"\n      style={{\n        backgroundImage:\n          \"linear-gradient(45deg, rgb(0, 159, 221) 0%, rgb(0, 148, 141) 100%)\",\n      }}\n    >\n      <div className=\"row min-vh-100\">\n        <div className=\"col mt-3\">\n          <div className=\"d-flex flex-column h-100\">\n            <div className=\"row\">\n              <div className=\"col-12 col-lg-5\">\n                <CurrencyCard\n                  srcCode={srcCode}\n                  dstCode={dstCode}\n                  sendCodeToParent={sendSrcCodeToParent}\n                  amountInEuro={amountInEuro}\n                  sendAmountInEuroToParent={sendAmountInEuroToParent}\n                />\n              </div>\n              <div className=\"col-12 col-lg-2 m-auto\">\n                <OverlayTrigger\n                  key=\"tooltip-key-swap\"\n                  placement=\"top\"\n                  overlay={\n                    <Tooltip id=\"tooltip-swap3\">Swap currencies</Tooltip>\n                  }\n                >\n                  <img\n                    className=\"img-fluid d-block mx-auto p-4 p-lg-0 w-25 swap\"\n                    style={{ transform: `rotate(${rotation}deg)` }}\n                    src={swapSvg}\n                    alt=\"swap\"\n                    onClick={swap}\n                  ></img>\n                </OverlayTrigger>\n              </div>\n              <div className=\"col-12 col-lg-5\">\n                <CurrencyCard\n                  srcCode={dstCode}\n                  dstCode={srcCode}\n                  sendCodeToParent={sendDstCodeToParent}\n                  amountInEuro={amountInEuro}\n                  sendAmountInEuroToParent={sendAmountInEuroToParent}\n                />\n              </div>\n            </div>\n            <div className=\"row mt-3 d-none d-lg-block\">\n              <div className=\"col\">\n                <span>Other exchanges rate today (base: {srcCode})</span>\n              </div>\n            </div>\n            <div className=\"row flex-grow-1 d-none d-lg-flex\">\n              <div className=\"col mt-3\">\n                <HistorialCard src={srcCode} dst={dstCode} />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}