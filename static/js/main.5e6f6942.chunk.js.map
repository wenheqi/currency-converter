{"version":3,"sources":["images/converter.svg","components/CurrencyCard.js","components/HistorialCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CurrencyCard","Card","className","Header","Body","Title","Subtitle","Row","Col","sm","alt","src","type","Component","data","name","uv","pv","amt","HistorialCard","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","stroke","activeDot","r","jsfiddleUrl","App","class","style","backgroundImage","OverlayTrigger","key","placement","overlay","Tooltip","id","swapSvg","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mHAAAA,EAAOC,QAAU,IAA0B,uC,kWC6C5BC,G,8KAvCX,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,2BACd,kBAACD,EAAA,EAAKE,OAAN,CAAaD,UAAU,YACrB,4BAAQA,UAAU,yBAChB,uCACA,uCACA,yCAGJ,kBAACD,EAAA,EAAKG,KAAN,KACE,kBAACH,EAAA,EAAKI,MAAN,8BACA,kBAACJ,EAAA,EAAKK,SAAN,UACA,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACP,yBACEC,IAAI,wBACJC,IAAI,iDAGR,kBAACH,EAAA,EAAD,CAAKC,GAAI,GACP,2BACEG,KAAK,SACLV,UAAU,8EAIhB,kBAACK,EAAA,EAAD,CAAKL,UAAU,QACb,kBAACM,EAAA,EAAD,KACE,0BAAMN,UAAU,SAAhB,mD,GA9BaW,c,QCQrBC,EAAO,CACX,CACEC,KAAM,SACNC,GAAI,IACJC,GAAI,KACJC,IAAK,MAEP,CACEH,KAAM,SACNC,GAAI,IACJC,GAAI,KACJC,IAAK,MAEP,CACEH,KAAM,SACNC,GAAI,IACJC,GAAI,KACJC,IAAK,MAEP,CACEH,KAAM,SACNC,GAAI,KACJC,GAAI,KACJC,IAAK,KAEP,CACEH,KAAM,SACNC,GAAI,KACJC,GAAI,KACJC,IAAK,MAEP,CACEH,KAAM,SACNC,GAAI,KACJC,GAAI,KACJC,IAAK,MAEP,CACEH,KAAM,SACNC,GAAI,KACJC,GAAI,KACJC,IAAK,OAIYC,E,uKAIjB,OACE,kBAAC,IAAD,CAAqBC,MAAM,QACzB,kBAAC,IAAD,CACEA,MAAM,OACNC,OAAQ,IACRP,KAAMA,EACNQ,OAAQ,CACNC,IAAK,EACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IAGV,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CACEhB,KAAK,WACLgB,QAAQ,KACRC,OAAO,UACPC,UAAW,CAAEC,EAAG,KAElB,kBAAC,IAAD,CAAMnB,KAAK,WAAWgB,QAAQ,KAAKC,OAAO,kB,GA5BThB,aAAtBM,EACZa,YAAc,6C,ICORC,E,uKA/CX,OACE,yBACEC,MAAM,YACNC,MAAO,CACLC,gBACE,uEAGJ,yBAAKF,MAAM,kBACT,yBAAKA,MAAM,YACT,yBAAKA,MAAM,4BACT,yBAAKA,MAAM,OACT,yBAAKA,MAAM,mBACT,kBAAC,EAAD,OAEF,yBAAKA,MAAM,0BACT,kBAACG,EAAA,EAAD,CACEC,IAAI,mBACJC,UAAU,MACVC,QACE,kBAACC,EAAA,EAAD,CAASC,GAAG,iBAAZ,oBAGF,yBACExC,UAAU,4CACVS,IAAKgC,IACLjC,IAAI,WAIV,yBAAKwB,MAAM,mBACT,kBAAC,EAAD,QAGJ,yBAAKA,MAAM,mBACT,yBAAKA,MAAM,YACT,kBAAC,EAAD,gB,GAtCAU,IAAM/B,WCJJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5e6f6942.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/converter.0f54a3c7.svg\";","import React, { Component } from \"react\";\nimport { Card, Button, ListGroup, Dropdown, Row, Col } from \"react-bootstrap\";\nimport \"./CurrencyCard.css\";\n\nclass CurrencyCard extends Component {\n  render() {\n    return (\n      <Card className=\"h-100 shadow-sm rounded\">\n        <Card.Header className=\"bg-white\">\n          <select className=\"form-control col-xs-3\">\n            <option>USD</option>\n            <option>AED</option>\n            <option>CNY</option>\n          </select>\n        </Card.Header>\n        <Card.Body>\n          <Card.Title>United States Dollars</Card.Title>\n          <Card.Subtitle>$</Card.Subtitle>\n          <Row>\n            <Col sm={3}>\n              <img\n                alt=\"flag of United States\"\n                src=\"https://www.countryflags.io/us/shiny/64.png\"\n              />\n            </Col>\n            <Col sm={9}>\n              <input\n                type=\"number\"\n                className=\"h-100 w-100 text-right border-top-0 border-left-0 border-right-0 fs-xlg\"\n              />\n            </Col>\n          </Row>\n          <Row className=\"mt-2\">\n            <Col>\n              <span className=\"fs-sm\">\n                Last update: 12:00:00 pm 05/15/2020 PDT\n              </span>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default CurrencyCard;\n","import React, { Component } from \"react\";\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\n\nconst data = [\n  {\n    name: \"Page A\",\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: \"Page B\",\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: \"Page C\",\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: \"Page D\",\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: \"Page E\",\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: \"Page F\",\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: \"Page G\",\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\nexport default class HistorialCard extends Component {\n  static jsfiddleUrl = \"https://jsfiddle.net/alidingling/xqjtetw0/\";\n\n  render() {\n    return (\n      <ResponsiveContainer width=\"100%\">\n        <LineChart\n          width=\"100%\"\n          height={300}\n          data={data}\n          margin={{\n            top: 5,\n            right: 30,\n            left: 20,\n            bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Line\n            type=\"monotone\"\n            dataKey=\"pv\"\n            stroke=\"#8884d8\"\n            activeDot={{ r: 8 }}\n          />\n          <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#82ca9d\" />\n        </LineChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Container, Row, Col, OverlayTrigger, Tooltip } from \"react-bootstrap\";\n\nimport swapSvg from \"./images/converter.svg\";\n\nimport currencies from \"./data/currencies.json\";\n\nimport CurrencyCard from \"./components/CurrencyCard\";\nimport HistorialCard from \"./components/HistorialCard\";\n\n// let HistoricalCardStyle = {\n//   min-height: 100vh!important;\n// }\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div\n        class=\"container\"\n        style={{\n          backgroundImage:\n            \"linear-gradient(45deg, rgb(0, 159, 221) 0%, rgb(0, 148, 141) 100%)\",\n        }}\n      >\n        <div class=\"row min-vh-100\">\n          <div class=\"col mt-3\">\n            <div class=\"d-flex flex-column h-100\">\n              <div class=\"row\">\n                <div class=\"col-12 col-lg-5\">\n                  <CurrencyCard />\n                </div>\n                <div class=\"col-12 col-lg-2 m-auto\">\n                  <OverlayTrigger\n                    key=\"tooltip-key-swap\"\n                    placement=\"top\"\n                    overlay={\n                      <Tooltip id=\"tooltip-swap3\">Swap currencies</Tooltip>\n                    }\n                  >\n                    <img\n                      className=\"img-fluid d-block mx-auto p-4 p-lg-0 w-25\"\n                      src={swapSvg}\n                      alt=\"swap\"\n                    ></img>\n                  </OverlayTrigger>\n                </div>\n                <div class=\"col-12 col-lg-5\">\n                  <CurrencyCard />\n                </div>\n              </div>\n              <div class=\"row flex-grow-1\">\n                <div class=\"col mt-3\">\n                  <HistorialCard />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}